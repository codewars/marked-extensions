{"version":3,"file":"marked-extensions.js","sources":["../src/objects.js","../src/strings.js","../src/doc-tokens/doc-types.js","../src/doc-tokens/doc-names.js","../src/doc-tokens/doc-globals.js","../src/doc-tokens/index.js","../src/method-doc.js","../src/table-doc.js","../src/renderer.js","../src/index.js"],"sourcesContent":["/**\n * Assigns the keys from source into target, but only those that are not already assigned. Useful\n * in place of Object.assign which would require a polyfill\n * @param target\n * @param source\n * @returns {*}\n */\nexport function assignMissing (target, source) {\n  Object.keys(source || {}).forEach(key => {\n    if (!(key in target)) {\n      target[key] = source[key];\n    }\n  })\n  return target;\n}\n","export function upperCaseWords (str) {\n  if (!str) return str\n  return str.replace(/(?:^|\\s)\\S/g, a => a.toUpperCase())\n}\n\nexport function camelCase (str, pascal) {\n  const cased = upperCaseWords(str.replace(/_/g, ' ')).replace(/ /g, '')\n  return pascal ? cased : lowerCaseFirst(cased)\n}\n\nexport function lowerCaseFirst (str) {\n  return `${str[0].toLowerCase()}${str.substr(1)}`;\n}\n\nexport function escapeHtml (text) {\n  return text ? text.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;') : text;\n}\n\nexport function unescapeHtml (text) {\n  return text ? text.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>') : text;\n}\n","import { escapeHtml, unescapeHtml } from '../strings'\n\n/**\n * Tracks some basic types that we convert for different languages. We don't need to try to\n * maintain a list for every type for every language we support, however we do want to track some\n * common types, such as hash, void, and primary types to minimize confusion.\n *\n * We will want to expand or trim this list as needed to find a good balance between useful and\n * too much language specialization.\n *\n */\nconst TYPES = {\n  void: {\n    'undefined': ['javascript', 'coffeescript'],\n    nil: ['ruby'],\n    None: ['python']\n  },\n  'null': {\n    nil: ['ruby'],\n    NSNull: ['objc'],\n    None: ['python']\n  },\n  object: {\n    NSObject: ['objc'],\n    _alias: 'hash'\n  },\n  hash: {\n    Hash: ['ruby'],\n    dict: ['python'],\n    Dictionary: ['csharp'],\n    HashMap: ['java'],\n    Object: ['javascript', 'typescript', 'coffeescript']\n  },\n  collection: {\n    List: ['java'],\n    Collection: ['csharp'],\n    _alias: 'list'\n  },\n  enumerable: {\n    IEnumerable: ['csharp'],\n    vector: ['cpp'],\n    _alias: 'array'\n  },\n  array: {\n    List: ['java'],\n    'NSArray*': ['objc'],\n    'std::list': ['cpp'],\n    default: 'Array'\n  },\n  list: {\n    List: ['java', 'csharp', 'scala', 'groovy', 'kotlin'],\n    'std::list': ['cpp'],\n    default: 'Array'\n  },\n  string: {\n    string: ['csharp', 'typescript'],\n    'std::string': ['cpp'],\n    'char*': ['c'],\n    'NSString *': ['objc'],\n    default: 'String'\n  },\n  integer: {\n    int: ['csharp', 'cpp', 'c', 'go'],\n    Int: ['swift', 'haskell', 'kotlin'],\n    'NSNumber *': ['objc'],\n    Number: ['javascript'],\n    number: ['typescript'],\n    default: 'Integer'\n  },\n  long: {\n    long: ['csharp', 'java', 'c', 'cpp'],\n    _alias: 'integer'\n  },\n  boolean: {\n    bool: ['csharp', 'c', 'cpp'],\n    Bool: ['swift'],\n    BOOL: ['objc'],\n    boolean: ['java', 'typescript'],\n    default: 'Boolean'\n  },\n  float: {\n    float: ['csharp'],\n    Number: ['javascript', 'coffeescript', 'typescript'],\n    default: 'Float'\n  },\n}\n\nconst NULLABLE = {\n  csharp: {\n    default: 'Nullable<@@>'\n  }\n}\n\n/**\n * Long story short this handles these types of cases\n * <code>@@docType:Array</code>\n * <code>@@docType:Array<String></code>\n * `@@docType:Array`\n * `@@docType:Array<String>`\n * `@@docType:Array<String, Int>`\n * `@@docType:Array<String,Int>`\n * @@docType:Array<String, Int>\n * @@docType: Promise<Array<Int>>\n * @@docType:Array\n * @type {RegExp}\n */\nconst regex = /(`|<code>|<pre>)?@@docType: ?([\\w_?]*(?:(?:<|&lt;)[\\w?]*(?:[,<]?\\s?\\w*>?){0,3}(?:>|&gt;))?)(`|<\\/code>|<\\/pre>)?/g;\nconst nestedRegex = /(?:<|&lt;)([\\w?]*(?:[,<]?\\s?\\w*>?){0,3})(?:>|&gt;)/g;\n\n/**\n * process all @@docType: tokens and replaces them with the correct display value, and possibly wraps them in a dfn tag\n * @param language\n * @param pre Boolean that determines if we are displaying this content within a pre element, so don't wrap with dfn tags\n * @param content The content to be replaced. Can handle replacing multiple tags at once\n */\nexport function replaceDocTypes (language, pre, content) {\n  return content.replace(regex, function (shell, codeStart, value, codeEnd) {\n    const nullable = !!value.match(/\\?$/);\n    value = value.replace('?', '').trim();\n    value = unescapeHtml(value);\n\n    value = maybeMapGeneric(language, value);\n\n    if (nullable) {\n      value = mapNullable(language, value);\n    }\n\n    return wrap(value, shell, pre, codeStart, codeEnd);\n  });\n}\n\nfunction mapNullable (language, value) {\n  if (NULLABLE[language]) {\n    const config = NULLABLE[language][value] || NULLABLE[language].default;\n    if (config) {\n      return config.replace('@@', value);\n    }\n  }\n\n  return value;\n}\n\nfunction maybeMapGeneric(language, value) {\n  const parts = value.split(nestedRegex).filter(p => !!p);\n\n  if (parts.length < 2) {\n    return mapType(language, value);\n  }\n  else if (parts.length === 2) {\n    return collectionType(language, parts[0], parts[1]);\n  }\n  else {\n    const root = parts.shift();\n    const mapped = parts.map(p => collectionType(language, p));\n    return `${root}<${mapped.join(', ')}>`;\n  }\n}\n\nfunction mapType (language, type, _default) {\n  const map = TYPES[type.toLowerCase()];\n  let mapped = null;\n  if (map) {\n    Object.keys(map).forEach(key => {\n      if (!mapped) {\n        if (key === 'default') {\n          mapped = map.default;\n        }\n        // if a string, then the value is an alias to another type\n        else if (key === '_alias') {\n          mapped = mapType(language, map._alias, type);\n        }\n        else if (map[key].indexOf(language) >= 0) {\n          mapped = key;\n        }\n      }\n    })\n    return mapped || _default || type;\n  }\n\n  return type;\n}\n\nfunction isTransformedType(type) {\n  return Object.keys(TYPES).indexOf(type.toLowerCase()) > -1;\n}\n\nfunction collectionType (language, type, nestedType) {\n  const nestedTypes = nestedType.split(/, ?/);\n  if (isTransformedType(type)) {\n    switch (language) {\n      case 'ruby':\n      case 'objc':\n      case 'python':\n        let plurals = mapTypes(language, nestedTypes)\n          .map(s => s.replace(' *', ''))\n          .join('s/');\n\n        let addS = plurals.indexOf(')') > 0 ? '' : 's';\n        return `${mapType(language, type)} (of ${plurals}${addS})`;\n\n      case 'csharp':\n      case 'java':\n        // if an array and not wrapping another array\n        if (type === 'Array' && nestedTypes.length == 1 && nestedTypes[0].indexOf('<') === -1) {\n          return `${mapType(language, nestedType)}[]`;\n        }\n        break;\n      case 'c':\n        if (type === 'List' && nestedTypes.length == 1 && nestedTypes[0].indexOf('<') === -1) {\n          return `${mapType(language, nestedType)}[]`;\n        }\n        break;\n      case 'haskell':\n        if ((type === 'List' || type === 'Array') && nestedTypes.length == 1) {\n          return `[${mapType(language, nestedType)}]`;\n        }\n        break;\n      case 'go':\n        if ((type === 'List' || type === 'Array') && nestedTypes.length == 1) {\n          return `[]${mapType(language, nestedType)}`;\n        }\n        break;\n    }\n  }\n  const result = collectionGeneric(language, type, nestedTypes);\n  return result;\n}\n\nfunction mapTypes(language, types) {\n  return types.map(t => maybeMapGeneric(language, t));\n}\n\nfunction collectionGeneric (language, type, nestedTypes) {\n  const mapped = mapTypes(language, nestedTypes).join(', ');\n  return `${mapType(language, type)}<${mapped}>`;\n}\n\n/**\n * Wraps the value within the necessary html to ensure that it gets rendered correctly\n * @param value\n * @param shell the shell of the @@docType syntax. Used to determine if a ` is present\n * @returns {string}\n */\nfunction wrap (value, shell, pre, start, end) {\n  value = escapeHtml(value.trim());\n\n  if (pre) {\n    return value;\n  }\n  else if (start) {\n    return start + value + (end || '');\n  }\n  else {\n    return `<dfn class=\"doc-type\">${value}</dfn>`;\n  }\n}\n","import { camelCase } from '../strings'\n\nexport const STYLES = {\n  Const: {\n    upper: ['default']\n  },\n  Method: {\n    upperCamel: ['csharp']\n  },\n  Prop: {\n    upperCamel: ['csharp']\n  },\n  Class: {\n    upperCamel: ['default']\n  },\n  // name acts as default\n  Name: {\n    camel: ['javascript', 'java', 'coffeescript', 'typescript', 'go', 'kotlin', 'scala', 'objc', 'php', 'swift', 'csharp', 'solidity', 'haskell'],\n    kabob: ['clojure'],\n  }\n}\n\nexport function replaceDocNames (language, pre, content) {\n\n  return content.replace(/`?@@doc(Name|Method|Const|Prop|Class|Param): ?([a-zA-Z0-9?_]*)`?/g, function (shell, type, value) {\n    return wrap(shell, type, pre, () => {\n      if (value) {\n        const style = findStyle(type, language);\n\n        switch (style) {\n          case 'upper':\n            return value.toUpperCase();\n\n          case 'kabob':\n            return value.replace(/_/g, '-');\n\n          case 'camel':\n            return camelCase(value);\n\n          case 'upperCamel':\n            return camelCase(value, true);\n\n          default:\n            return value;\n        }\n      }\n      else {\n        console.warn('replaceDocNames value is missing:', content); // eslint-disable-line no-console\n        return '';\n      }\n    })\n  })\n}\n\nfunction findStyle(type, language) {\n  let style = Object.keys(STYLES[type] || []).find(style => {\n    let _style = STYLES[type][style];\n    return _style ? _style.indexOf(language) >= 0 : false;\n  })\n\n  // try to find a default style for the type\n  if (!style && language !== 'default') {\n    style = findStyle(type, 'default');\n  }\n\n  // default to name if no specific style is set\n  if (!style && type !== 'Name') {\n    style = findStyle('Name', language);\n  }\n\n  return style;\n}\n\nfunction wrap (shell, type, pre, value) {\n  value = value();\n  if (shell.indexOf('`') === 0 || pre) {\n    return shell.replace(/@@doc(Name|Method|Const|Prop|Class|Param): ?([a-zA-Z0-9?_]*)/, value);\n  }\n  else {\n    return `<dfn class=\"doc-name doc-name--${type.toLowerCase()}\">${value}</dfn>`;\n  }\n}\n","export function replaceDocGlobals (language, pre, content) {\n  return content.replace(/@@docGlobal: ?.*`?/g, function (value) {\n    switch (language) {\n      // languages which should keep the global class\n      case 'java':\n      case 'csharp':\n      case 'kotlin':\n      case 'scala':\n        return wrap(value.replace(/@@docGlobal: ?/, ''), pre);\n\n      // all other languages remove the global class\n      default:\n        return wrap(value.replace(/@@docGlobal: ?[a-zA-Z\\d]*\\./, ''), pre);\n    }\n  })\n}\n\nfunction wrap (value, pre) {\n  return pre ? value : `<dfn class=\"doc-class\">${value}</dfn>`;\n}\n","import { replaceDocTypes } from './doc-types'\nimport { replaceDocNames } from './doc-names'\nimport { replaceDocGlobals } from './doc-globals'\n\n/**\n * Preprocesses the markdown before sending it through marked. This is used to process\n * doc tokens and any other future extensions that we support that don't require being handled\n * during the marked rendering.\n * @param result\n */\nexport function processDocTokens(result, html, pre) {\n  const language = result.originalLanguage || result.language;\n  const globals = replaceDocGlobals(language, pre, html);\n  const types = replaceDocTypes(language, pre, globals);\n  const names = replaceDocNames(language, pre, types);\n\n  return names;\n}\n","import { escapeHtml } from './strings';\n\n\nexport function methodDoc(code, language) {\n  try {\n    let json = JSON.parse(code);\n\n    // support language specific overrides\n    if (json.languages && json.languages[language]) {\n      Object.assign(json, json.languages[language]);\n    }\n\n    const md = [];\n\n    if (!json.examplesOnly) {\n      if (json.method) {\n        md.push(methodHeader(json));\n      }\n      if (json.desc) {\n        md.push(json.desc);\n      }\n\n      md.push('```%doc');\n\n      if (json.args) {\n        md.push('Parameters:');\n        md.push(parameters(json));\n      }\n      md.push('Return Value:');\n      md.push(returnType(json));\n      if (json.constraints && json.constraints.length) {\n        md.push('Constraints:');\n        md.push(json.constraints.join('\\n'));\n      }\n      if (json.errors && json.errors.length) {\n        md.push('Errors:');\n        md.push(json.errors.join('\\n'));\n      }\n      md.push('```');\n    }\n\n    if (json.examples && json.examples.length) {\n      md.push('```%doc-block');\n      md.push('#### Examples');\n      md.push(exampleHeader(json));\n      md.push(exampleRows(json));\n      md.push('```');\n    }\n\n    return md.join('\\n');\n  }\n  catch (ex) {\n    return '`Failed to render %jsonblock: ' + ex.message + '`';\n  }\n}\n\nfunction hasExampleNames(json) {\n  return json.examples && json.examples.filter(e => !!e.name).length > 0;\n}\nfunction exampleRows(json) {\n  const hasExamples = hasExampleNames(json);\n  return json.examples.map(v => exampleRow(json, v, hasExamples)).join('\\n');\n}\n\nfunction exampleRow(json, example, hasExamples) {\n  let md = '';\n  if (hasExamples) {\n    const name = example.name;\n    md = `*${name || 'Example'}*|`;\n  }\n\n  if (example.args) {\n    md += example.args.map(arg => formatExampleValue(arg)).join('|');\n  }\n  md += `|${formatExampleValue(example.returns) || ''}`;\n  return md;\n}\n\nfunction formatExampleValue(value) {\n  return `<code>${JSON.stringify(value)}</code>`;\n}\n\nfunction exampleHeader(json) {\n  const line1 = [];\n  const line2 = [];\n  if (hasExampleNames(json)){\n    line1.push('');\n    line2.push('');\n  }\n\n  Object.keys(getArgs(json)).forEach(key => {\n    line1.push(key)\n    line2.push('');\n  });\n  line1.push('Return Value');\n  return `${line1.join('|')}\\n-${line2.join('|-')}|-`;\n}\n\nfunction getArgs(json) {\n  return json.args || json.params || json.parameters || {};\n}\n\nfunction methodName(json) {\n  let globalName = json.global !== false ? `@@docGlobal:${json.global || 'Challenge'}.` : '';\n  // if a class is provided, it will always be shown and overrides global\n  if (json.class) {\n    globalName = `@@docClass:${json.class}.`;\n  }\n\n  return `${globalName}@@docMethod:${json.method}`;\n}\n\nfunction methodHeader(json) {\n  const args = Object.keys(getArgs(json)).map(key => `\\`@@docName:${key}\\``);\n  return `### \\`${methodName(json)}\\`(${args.join(', ')})`;\n}\n\nfunction parameters(json) {\n  const args = getArgs(json);\n  const params = Object.keys(args).map(key => {\n    const arg = args[key];\n    const type = typeof arg === 'string' ? arg : arg.type;\n    let md = `@@docName:${key}: ${formatDocType(json, type, 'String')}`;\n    if (arg.desc) {\n      md += ` - ${arg.desc}`;\n    }\n\n    return md;\n  });\n\n  return params.join('\\n');\n}\n\nfunction returnType(json) {\n  if (json.returns) {\n    const type = typeof json.returns === 'string' ? json.returns : json.returns.type;\n    let md = formatDocType (json, type, 'void');\n    if (json.returns.desc) {\n      md += ` - ${json.returns.desc}`;\n    }\n\n    return md;\n  }\n  return '@@docType:void';\n}\n\nfunction formatDocType(json, type, defaultValue) {\n  if (json.formatTypes === false) {\n    return `<dfn class=\"doc-type\">${escapeHtml(type)}</dfn>`;\n  }\n  else {\n    return `@@docType:${type || defaultValue || 'null'}`\n  }\n}\n","export function tableDoc(code) {\n  try {\n    let json = JSON.parse(code);\n    const html = [];\n\n    if (json.table) {\n      html.push(`<h3>${json.table}</h3>`);\n    }\n\n    if (json.desc) {\n      html.push(`<p>${json.desc}</p>`);\n    }\n\n    html.push('<table>');\n    html.push('<thead><tr><th>Column</th><th>Type</th></tr></thead>');\n    if (json.columns){\n      html.push('<tbody>');\n      html.push(tableHeaders(json.columns));\n      html.push('</tbody>');\n    }\n\n    html.push('</table>');\n    return html.join('\\n');\n  }\n  catch (ex) {\n    return '`failed to render %jsonblock: `' + ex.message + '`';\n  }\n}\n\nconst tableHeaders = json =>\n  Object.keys(json)\n  .map(k => `<tr><td>${k}</td><td>${json[k]}</td></tr>`)\n  .join('\\n');\n","import { assignMissing } from './objects'\nimport { processDocTokens } from './doc-tokens'\nimport { methodDoc } from './method-doc';\nimport { tableDoc } from './table-doc';\n\n\n\nexport function buildRenderer(marked, options, result) {\n  const renderer = result.renderer = new marked.Renderer();\n\n  const markedOptions = { renderer };\n  assignMissing(markedOptions, options.marked || {});\n\n  // provide the render method, this will also be used later to render nested blocks\n  result.render = (md) => marked(md, markedOptions);\n\n  setupHeader(renderer, options, result);\n  setupCode(options, result);\n}\n\n/**\n *\n * @param renderer\n */\nfunction setupHeader(renderer, options, result) {\n  // heading extensions\n  renderer.heading = function (text, level) {\n    // you can set icons via icon::name\n    const icon = text.match(/icon::([a-z-]*)/);\n    let attributes = '';\n    if (icon) {\n      // indicate that this icon has been used\n      result.icons[icon[1]] = true;\n\n      attributes = ` class=\"${options.iconClassPrefix}${icon[1]}\"`;\n      text = text.replace(/icon::[a-z-]*/, '');\n    }\n\n    // we track headers 1 - 4 and add ids to them so that we can link to them later if we want to\n    if (level < 5) {\n      const header = result.headers[`h${level}`];\n      const index = header.length;\n      attributes += ` id=\"h${level}_${index}\"`;\n      header.push(text);\n    }\n\n    return `<h${level}${attributes}>${text}</h${level}>`;\n  }\n}\n\n/**\n * Handles code blocks in a variety of ways\n * @param options\n * @param result\n */\nfunction setupCode(options, result) {\n  const _code = result.renderer.code;\n\n  // special version of render that will process doc tokens. Needed at times when\n  // tokens are nested inside of pre and should be rendered without tags (but their labels should still be processed)\n  const render = (code, preTokens) => {\n    if (preTokens && options.docTokens) {\n      code = processDocTokens(result, code, true);\n    }\n\n    return result.render(code);\n  }\n\n\n  result.renderer.code = function(code, language) {\n    if (language) {\n      if (language.match(/^if:/)) {\n        return matchIfBlockLanguage(result, language) ? render(code) : '';\n      }\n      else if (language.match(/^if-not:/)) {\n        return matchIfBlockLanguage(result, language) ? '' : render(code);\n      }\n      else if (language.match(/^tab:/)) {\n        return handleTab(result, code, language);\n      }\n      else if (result.extensions.indexOf(language) >= 0) {\n        return handleExtension(options, result, code, language);\n      }\n      else if (language === '%definitions' || language === '%doc') {\n        return wrapInBlockDiv(language, renderDefinitions(result, code, render));\n      }\n      else if (language === '%method-doc') {\n        return wrapInBlockDiv('docs method-doc', render(methodDoc(code, result.originalLanguage)));\n      }\n      else if(language === '%table-doc') {\n        return wrapInBlockDiv('docs table-doc', tableDoc(code))\n     }\n      else if (language[0] === '%') {\n        return wrapInBlockDiv(language, result.render(code));\n      } \n\n      // make sure this is a language and not some random tag\n      const foundLanguage = options.findLanguage(language.split(':')[0]);\n\n      if (foundLanguage) {\n        // if filtering is enabled and this is not the active language then filter it out\n        if (options.filterLanguages && foundLanguage !== result.language && result.language) {\n          return '';\n        }\n\n        // if CodeMirror is provided then highlight using that instead\n        if (options.cm) {\n          return highlightCM(options, code, foundLanguage, language);\n        }\n      }\n      // process line numbers, if they are set (i.e. ruby:10) in a naive simple way\n      else if (options.lineNumbers) {\n        code = lineNumbers(code, language);\n      }\n    }\n\n    return wrapLanguage(options, _code.call(result.renderer, code, language), language);\n  }\n}\n\nfunction lineNumbers(code, language, wrapper = '@@ ') {\n  let lineNumber = getLineNumber(language);\n\n  // if there are line numbers, then add them now starting at the start index\n  if (lineNumber > 0) {\n    code = code.split('\\n').map(line => {\n      return `${wrapper.replace('@@', lineNumber++)}${line}`\n    }).join('\\n');\n  }\n\n  return code;\n}\n\nfunction wrapLanguage(options, code, language) {\n  // if we have reached this point then CM isn't enabled and we need to\n  if (language && options.languageWrapper) {\n    if (typeof options.languageWrapper === 'function') {\n      code = options.languageWrapper(code, language);\n    }\n    else {\n      code = options.languageWrapper.replace('{slot}', code);\n    }\n  }\n\n  return code;\n}\n\nfunction highlightCM(options, code, language, raw) {\n  const el = window.document.createElement('div');\n  options.cm.runMode(code, options.findMode(language), el);\n\n  let codeHtml = el.innerHTML;\n  if (options.lineNumbers) {\n    codeHtml = lineNumbers(codeHtml, raw, '<span class=\"cm-line-number\">@@</span>');\n  }\n\n  const result = `<pre class=\"cm-runmode cm-s-${options.theme}\"><code>${codeHtml}</code></pre>`;\n  return wrapLanguage(options, result, language);\n}\n\nfunction getLineNumber(language) {\n  const parts = language.split(':');\n  return parts.length > 1 ? parseInt(parts[1], 10) : null;\n}\n\nfunction wrapInBlockDiv(type, contents) {\n  return `<div class=\"block block--${type.replace(/^%/, '')}\">${contents}</div>`;\n}\n\nfunction matchIfBlockLanguage(result, language) {\n  return language.replace(/^if(-not)?: ?/, '').split(',').indexOf(result.originalLanguage) >= 0;\n}\n\nfunction handleTab(result, code, language) {\n  // parts should be up to tab:LABEL with language being optional\n  const parts = language.split(':');\n  let label = parts[1].replace(/\\+/g, ' ');\n  result.tabs[label] = `${result.render(code)}`;\n  return '';\n}\n\n/**\n * If the extension value is a function, it will treat it as a render function, otherwise it will\n * assume the extension value is a string and treat it as a template with {code} as the code placeholder.\n * @param options\n * @param code\n * @param language\n */\nfunction handleExtension(options, result, code, language) {\n  const ext = options.extensions[language]\n\n  if (typeof ext.code === 'function') {\n    return ext.code(code, options);\n  }\n  else {\n    return ext.code.replace('{code}', code);\n  }\n}\n\n/**\n *\n * @param result\n * @param code\n * @returns {string}\n */\nfunction renderDefinitions (result, code, render) {\n  var html = '<dl>';\n  if (code) {\n    code.split('\\n').forEach(line => {\n      if (line.match(/^#/)) {\n        html += render(line);\n      }\n      else if (line.match(/: *$/)) {\n        html += `<dt>${line.replace(/:$/, '')}</dt>`;\n      }\n      else {\n        // if line starts with 4 white spaces, a tab or a ` block, then consider it a pre tag and don't render dfn\n        html += `<dd>${render(line, !!line.match(/^(\\t|\\s{4}|`)/))}</dd>`;\n      }\n    });\n  }\n\n  return html + '</dl>';\n}\n","import { assignMissing } from './objects'\nimport { buildRenderer } from './renderer'\nimport { processDocTokens } from './doc-tokens'\n\nexport const defaultOptions = {\n  // these are the options passed to marked directly\n  marked: {},\n  // languages that should be treated as extensions. You can configure how each gets handled\n  extensions: {\n    mermaid: {\n      // code handler\n      code: code => `<div class=\"mermaid\">${code}</div>`,\n      // will lazy load script automatically\n      src: 'https://cdn.rawgit.com/knsv/mermaid/6.0.0/dist/mermaid.min.js',\n      afterRender: () => window.mermaid && window.mermaid.init()\n    },\n  },\n  // set to a method that that will receive a language and return the mapped\n  // name. if no name is returned, it is assumed that the language is an extension.\n  // The default method only handles a default set of languages.\n  findLanguage: (language) => defaultLanguages.indexOf(language) >= 0 ? language: null,\n\n  // used with CodeMirror.runMode, used to find the mode of the language. By default will just return the language\n  findMode: (language) => language,\n\n  // The highlight theme to add, only used with cm runMode\n  theme: 'neo',\n\n  // you can set icons within headers using icon::ICONNAME, this setting determines the icon class prefix used\n  iconClassPrefix: 'icon-',\n\n  // set to a value that should wrap standard languages. Use \"{slot}\" to indicate where the code should be inserted: i.e.\n  // '<div class=\"tab\">{code}</div>'. Can also be a function which takes (code, language) as its parameters.\n  languageWrapper: null,\n\n  // the language that should be used for filtering out all other languages\n  language: null,\n\n  // true if languages should be filtered\n  filterLanguages: true,\n\n  // if the language value is not set, or is set to a value not found within the markdown, this\n  // setting will default the language to the first one found within the markdown.\n  defaultLanguageToFirst: true,\n\n  // true if line numbers should be added to highlighted code (if a starting line number is configured for the block)\n  lineNumbers: true,\n\n  // css class used to display a line number gutter, which can be used to try to create an opacity layer\n  // which will style the cm-number values differently. Set to null to disable adding a gutter.\n  lineNumbersGutter: 'cm-runmode-linenumbers-gutter',\n\n  // true if doc tokens should be parsed\n  docTokens: true,\n\n  // if set to an instance of js-yaml, it will process meta data at the top of the markdown.\n  jsYaml: null,\n\n  // If set to CodeMirror class, it will use CodeMirror.runMode to process syntax highlighting\n  // Note: make sure to import codemirror/addon/runmode/runmode.js first.\n  cm: null,\n\n  // set to automatically load a CM language. This is provided by default but you can override if you wish\n  // to override. This option is only used if both cm and loadScript are set.\n  // You can set this to null if you do not wish or need to load languages dynamically\n  loadCMLanguage: (language, options) => {\n    return options.loadScript(`//cdnjs.cloudflare.com/ajax/libs/codemirror/${options.cm.version}/mode/${language}/${language}.min.js`);\n  },\n\n  // If you wish to support loading external extension scripts, you should set this to a\n  // function that takes a url and returns a promise. Note that this function will need to be responsible\n  // for not reloading the same scripts if requested more than once, this library does not take care of caching.\n  loadScript: null,\n\n  // if set to a function, will be called back after all external scripts have loaded\n  onLoaded: null\n};\n\nexport const defaultLanguages = [\n  'c', 'clojure', 'coffeescript', 'cpp', 'csharp', 'elixir', 'erlang', 'fsharp',\n  'go', 'groovy', 'haskell', 'java', 'javascript', 'kotlin', 'objc', 'ocaml', 'php', 'python',\n  'r', 'ruby', 'scala', 'shell', 'solidity', 'sql', 'swift', 'typescript'\n]\n\n/**\n * Processes the markdown using marked along with the many extensions this library provides\n * @param marked The marked library, must be passed in since it is not included within this library as a dependency\n * @param markdown The markdown to process\n * @param options The extended set of options, as well as marked options. See defaultOptions for more details.\n * @returns {{originalLanguage, language, languages: [], extensions: [], tabs: {}, headers: {h1: Array, h2: Array, h3: Array, h4: Array}, icons: [], raw: *, preprocessed: *}}\n */\nexport function process(marked, markdown, options = {}) {\n  assignMissing(options, defaultOptions);\n\n  const result = {\n    originalLanguage: options.language,\n    language: options.language,\n    languages: {},\n    extensions: {},\n    tabs: {},\n    headers: {h1: [], h2: [], h3: [], h4: []},\n    icons: {},\n    raw: markdown,\n    preprocessed: markdown\n  };\n\n  if (options.jsYaml) {\n    processMeta(options, result);\n  }\n\n  processBlocks(options, result);\n  if (options.defaultLanguageToFirst) {\n    processLanguage(result);\n  }\n\n  buildRenderer(marked, options, result);\n\n  var html = null;\n  result.html = () => html || (html = render(options, result));\n  result.afterRender = afterRenderFn(options, result);\n\n  // convert objects which have been acting as basic sets to an array\n  ['languages', 'extensions', 'icons']\n    .forEach(key => result[key] = Object.keys(result[key]));\n\n  if (options.loadScript) {\n    processExternalScripts(options, result);\n  }\n\n  return result;\n}\n\nfunction render(options, result) {\n  let html = result.render(result.preprocessed);\n\n  if (options.docTokens) {\n    html = processDocTokens(result, html);\n  }\n\n  return html;\n}\n\n/**\n * Creates the afterRender function that is added to the result, which can be called once the\n * processed html has been added to the DOM to initialize any extensions that may have been loaded.\n * @param options\n * @param result\n * @returns {Function}\n */\nfunction afterRenderFn(options, result) {\n  return function() {\n    result.extensions.forEach(ext => {\n      const config = options.extensions[ext];\n      if (config && config.afterRender) {\n        config.afterRender.apply(result, arguments);\n      }\n    });\n  }\n}\n\n/**\n * Will loop through extensions and languages and try to dynamically load scripts.\n * @param options\n * @param result\n */\nfunction processExternalScripts(options, result) {\n  const promises = [];\n  result.extensions.forEach(ext => {\n    const config = options.extensions[ext];\n    if (config && config.src) {\n      promises.push(options.loadScript(config.src));\n    }\n  });\n\n  // automatically load the CM language that is shown\n  if (options.cm && options.loadCMLanguage) {\n    // if we filter languages then we only need to load the one being shown\n    if (options.filterLanguages && result.language) {\n      promises.push(options.loadCMLanguage(result.language, options));\n    }\n    // otherwise we need to load them all\n    else if (!options.filterLanguages && result.languages.length) {\n      result.languages.forEach(language => {\n        promises.push(options.loadCMLanguage(language, options));\n      });\n    }\n  }\n\n  Promise.all(promises).then(() => {\n    if (options.onLoaded) {\n      options.onLoaded(result);\n    }\n  });\n}\n\n/**\n * Processes yaml content at the top of the markdown, marked starting by a --- and ending with a ...\n * @param options\n * @param result\n */\nfunction processMeta(options, result) {\n  result.preprocessed = result.preprocessed.replace(/^---\\r?\\n(.*\\r?\\n)*\\.{3}\\s*(\\r?\\n){2}?/, meta => {\n    let yaml = meta.replace(/^---\\r?\\n/, '').replace(/\\r?\\n\\.\\.\\. *\\r?\\n?/, '');\n    result.meta = options.jsYaml.safeLoad(yaml);\n    return '';\n  });\n}\n\n/**\n * if no language was provided, or the one provided is not in the list of supported languages,\n * then switch to the first language found\n * @param result\n */\nfunction processLanguage(result) {\n  if (!result.language || !result.languages[result.language]) {\n    result.language = Object.keys(result.languages)[0];\n  }\n}\n\n/**\n * Loops through all ``` style blocks and figures out which are languages and which are\n * possibly extensions\n * @param markdown\n * @param options\n * @param result\n */\nfunction processBlocks(options, result) {\n  let blocks = result.preprocessed.match(/^(```|~~~) ?(.*) *$/gm) || [];\n  blocks = blocks.map(m => m.replace(/(```|~~~) ?/g, ''));\n\n  // loop through each block and track which are languages and which are extensions\n  blocks.forEach((text) => {\n    if (text) {\n      text = text.replace(/^if(-not)?: ?/, '').split(':')[0];\n\n      text.split(',').forEach(name => {\n        // % is a special token, we know these aren't either languages or extensions\n        if (name.indexOf('%') === -1) {\n          // if an extension has been defined for the language, track it now\n          if (options.extensions[name]) {\n            result.extensions[name] = true;\n          }\n          else {\n            const language = options.findLanguage(name);\n            if (language) {\n              result.languages[language] = true;\n            }\n          }\n        }\n      })\n    }\n  });\n}\n"],"names":["assignMissing","target","source","Object","keys","forEach","key","upperCaseWords","str","replace","a","toUpperCase","camelCase","pascal","cased","lowerCaseFirst","toLowerCase","substr","escapeHtml","text","unescapeHtml","TYPES","void","nil","None","NSNull","object","NSObject","_alias","hash","Hash","dict","Dictionary","HashMap","collection","List","Collection","enumerable","IEnumerable","vector","array","default","list","string","integer","int","Int","Number","number","long","boolean","bool","Bool","BOOL","float","NULLABLE","csharp","regex","nestedRegex","replaceDocTypes","language","pre","content","shell","codeStart","value","codeEnd","nullable","match","trim","maybeMapGeneric","mapNullable","wrap","config","parts","split","filter","p","length","mapType","collectionType","root","shift","mapped","map","join","type","_default","indexOf","isTransformedType","nestedType","nestedTypes","plurals","mapTypes","s","addS","result","collectionGeneric","types","t","start","end","STYLES","Const","upper","Method","upperCamel","Prop","Class","Name","camel","kabob","replaceDocNames","style","findStyle","console","warn","find","_style","replaceDocGlobals","processDocTokens","html","originalLanguage","globals","names","methodDoc","code","json","JSON","parse","languages","assign","md","examplesOnly","method","push","methodHeader","desc","args","parameters","returnType","constraints","errors","examples","exampleHeader","exampleRows","ex","message","hasExampleNames","e","name","hasExamples","exampleRow","v","example","formatExampleValue","arg","returns","stringify","line1","line2","getArgs","params","methodName","globalName","global","class","formatDocType","defaultValue","formatTypes","tableDoc","table","columns","tableHeaders","k","buildRenderer","marked","options","renderer","Renderer","markedOptions","render","setupHeader","setupCode","heading","level","icon","attributes","icons","iconClassPrefix","header","headers","index","_code","preTokens","docTokens","matchIfBlockLanguage","handleTab","extensions","handleExtension","wrapInBlockDiv","renderDefinitions","foundLanguage","findLanguage","filterLanguages","cm","highlightCM","lineNumbers","wrapLanguage","call","wrapper","lineNumber","getLineNumber","line","languageWrapper","raw","el","window","document","createElement","runMode","findMode","codeHtml","innerHTML","theme","parseInt","contents","label","tabs","ext","defaultOptions","mermaid","src","afterRender","init","defaultLanguages","defaultLanguageToFirst","lineNumbersGutter","jsYaml","loadCMLanguage","loadScript","version","onLoaded","process","markdown","h1","h2","h3","h4","preprocessed","processMeta","processBlocks","processLanguage","afterRenderFn","processExternalScripts","apply","arguments","promises","Promise","all","then","yaml","meta","safeLoad","blocks","m"],"mappings":"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"}